package com.antipov.buildaroute.ui.base;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.DialogFragment;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;

import com.antipov.buildaroute.R;
import com.antipov.buildaroute.di.component.ActivityComponent;
import com.antipov.buildaroute.utils.DialogUtils;

import java.util.Objects;

public abstract class BaseDialogFragment extends DialogFragment implements IBaseView {
    private Context context;
    private BaseActivity mActivity;
    private View view;

    /**
     * called when fragment attaches to an activity
     * saving context and get instance of base activity.
     *
     *
     * @param context - activity context
     */
    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        this.context = context;
        if (context instanceof BaseActivity) {
            mActivity = (BaseActivity) context;
        }
    }

    /**
     * Called when creating dialog.
     *
     * Calls to methods:
     * @see #getExtras()
     * @see #initViews()
     * @see #initListeners()
     *
     * @param savedInstanceState - saved instance state
     */
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        LayoutInflater layoutInflater = Objects.requireNonNull(getActivity()).getLayoutInflater();
        view = layoutInflater.inflate(R.layout.dialog_address_input, null);
        getExtras();
        initViews();
        initListeners();
    }

    /**
     * @return inflated view
     */
    public View getInflatedView() {
        return view;
    }

    /**
     * @return reference to the base activity
     */
    @Nullable
    public BaseActivity getBaseActivity() {
        return mActivity;
    }

    /**
     * called when detached from an activity
     *
     * removing reference to base activity
     */
    @Override
    public void onDetach() {
        mActivity = null;
        super.onDetach();
    }

    /**
     * Instantiate and return activity component
     *
     * @return ActivityComponent generated by Dagger2
     */
    public ActivityComponent getAppComponent() {
        if (mActivity != null) {
            return mActivity.getComponent();
        }
        return null;
    }

    @Override
    public void showLoading() {

    }

    @Override
    public void hideLoading() {

    }

    @Override
    public void showLoadingFullscreen() {

    }

    @Override
    public void hideLoadingFullscreen() {

    }

    @Override
    public void onError(int resId) {

    }

    @Override
    public void onError(String message) {

    }

    @Override
    public void showMessage(String message) {
    }

    @Override
    public void showMessage(int resId) {

    }

    @Override
    public boolean isNetworkConnected() {
        return false;
    }

    @Override
    public void hideKeyboard() {

    }

    /**
     * get extras from the bundle
     */
    public abstract void getExtras();

    /**
     * Initializing views. Put in the implementation your findViewById() methods
     * Or instantiate ButterKnife instead.
     */
    public abstract void initViews();

    /**
     * Create your listener callbacks there.
     */
    public abstract void initListeners();

    /**
     * Method for setup layout.
     * An implementation returning layout id for inflating.
     * I.e. R.layout.main
     *
     * @return layout id. If you are don`t using layout, just return -1
     */
    public abstract int getLayoutId();
}
